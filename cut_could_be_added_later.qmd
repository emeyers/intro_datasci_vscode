# Cut material


#### String methods

A **method** is a function that is attached to a piece of data ^[Or to be more precise, a method is a function attached to an object]. There are a number of "string methods" which allow you to perform specific operations on strings, such as changing their case, finding substrings, or replacing text.

You call a method by writing the string (or variable containing a string), followed by a dot (`.`), the method name, and parentheses. For example, the `.upper()` method returns a copy of the string with all letters converted to uppercase:

```{python}

"hello".upper()

```

Here is a table of some particularly useful string methods.

|   Method             | Example                     | Description                 | Result                |
|----------------------|-----------------------------|-----------------------------|-----------------------|
|   `.upper()`         | `"hello".upper()`         | Converts all characters to uppercase        | `'HELLO'`    |
|   `.lower()`         | `"HELLO".lower()`         | Converts all characters to lowercase        | `'hello'`    |
|   `.strip()`         | `"  hello  ".strip()`     | Removes leading and trailing whitespace     | `'hello'`    |
|  `.replace(a, b)`    | `"ha".replace("a", "o")`  | Replace all occurrences of `a` with `b`    | `'ho'`        |
|   `.count(x)`        | `"banana".count("a")`     | Counts the number of occurrences of `x`     | `3`          |
|   `.zfill(n)`        | `"42".zfill(5)`           | Pads the string with zeros to reach length `n` | `'00042'` |
| `.find(x)`       | `"hello".find("e")`       | Returns the index of the first occurrence of `x` | `1`         |


: A few Python string methods {#tbl-string-methods}


::: {.callout-tip title="Exercise" #exercise-python_basics-string_methods}


:::


COULD PERHAPS MOVE THIS SECTION LATER IN A DATA CLEANING SECTION...





| Method           | Example                   | Description                                 | Result                |
|------------------|--------------------------|---------------------------------------------|-----------------------|
| `.split()`       | `"a,b,c".split(",")`      | Splits string into a list by separator      | `['a', 'b', 'c']`     |
| `.join(list)`    | `",".join(['a','b','c'])` | Joins list elements into a string           | `'a,b,c'`             |




::: {.callout-tip title="Exercise" #exercise-python_basics-warmup-dictionary}

Please create a dictionary with the following information: 

| Key         | Value                                 |
|-------------|---------------------------------------|
| student_id  | S12345                                |
| name        | Bob                                   |
| major       | Computer Science                      |
| courses     | ["ECON 1590", "PSYC 1410", "AFAM 1700"]    |


Then do the following:
1. Print the student's name
2. Add the student's GPA to the dictionary with a value of 3.5
3. Add the class SDS 1230 to the list of cources the student is taking

:::


::: {.callout-note title="Solution" #solution-python_basics-warmup-dictionary collapse="true"}


```{python}
student_info = {
    "student_id": "S12345",
    "name": "Bob",
    "major": "Computer Science",
    "courses": ["ECON 1590", "PSYC 1410:", "AFAM 1700"]
}

# Print the student's name
print(f"Student Name: {student_info['name']}")


# Add a GPA for the student
student_info["gpa"] = 3.75
print(f"GPA: {student_info['gpa']}")

# Update the list of courses
student_info["courses"].append("SDS 1230") # Using the append() method for lists
print(f"Updated Courses: {student_info['courses']}")
```

:::

Can you see this Jules? 