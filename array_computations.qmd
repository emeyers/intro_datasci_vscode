# Array computations



### Time series and line plots

Do this in the context of array computations, specifically focusing on time series data and line plots.


While our main movie dataset subset (`budget_2013_dollars`, `revenue_2013_dollars`) doesn't directly include a simple time component for these specific lists, line plots are crucial for visualizing data that *is* collected over time (time series data). Let's consider a different, classic example to illustrate line plots.

**Time series data** is a sequence of data points recorded or collected over regular time intervals (e.g., hourly, daily, monthly, yearly). Examples include daily stock prices, monthly rainfall, annual company profits, etc.

A **line plot** (or line graph) is the most common way to visualize time series data. It connects data points with straight lines, making it easy to see trends, patterns, seasonality, and fluctuations over time.

**Python Code using Matplotlib:**
Let's plot the average monthly temperature for a city over a year.

```{python}

import matplotlib.pyplot as plt

months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
# Corresponding average temperatures (example values)
avg_temps = [5, 7, 10, 15, 20, 25, 28, 27, 22, 16, 10, 6] # in Celsius

plt.figure(figsize=(10, 6))
plt.plot(months, avg_temps, marker='o', linestyle='-', color='red') # 'o' adds a marker at each point

plt.title("Average Monthly Temperature")
plt.xlabel("Month")
plt.ylabel("Average Temperature (Â°C)")
plt.xticks(rotation=45) # Rotate x-axis labels if they overlap
plt.grid(True)
plt.show()

```


In a line plot, the x-axis usually represents time, and the y-axis represents the value of the variable being measured.

::: {.exercise}
**Exercise: Company Sales Line Plot**

A company's annual sales (in thousands of dollars) over the last 5 years are:
`years = [2018, 2019, 2020, 2021, 2022]`
`sales = [100, 110, 95, 120, 130]`

1.  Create a line plot to visualize these sales data.
2.  Label your plot appropriately.
3.  Describe any trend you observe in the sales data.
:::

::: {.solution}
**Solution: Company Sales Line Plot**

1.  **Line Plot Code:**
```{python}

import matplotlib.pyplot as plt

years = [2018, 2019, 2020, 2021, 2022]
sales = [100, 110, 95, 120, 130] # Sales in thousands of dollars

plt.figure(figsize=(8, 5))
plt.plot(years, sales, marker='s', linestyle='--', color='purple') # 's' for square marker

plt.title("Annual Company Sales (2018-2022)")
plt.xlabel("Year")
plt.ylabel("Sales (in $1000s)")
plt.xticks(years) # Ensure all years are shown as ticks
plt.ylim(bottom=0) # Optional: make y-axis start at 0
plt.grid(True, linestyle=':', alpha=0.7) # Light, dotted grid
plt.show()

```


 *(This code will display the line plot.)*

2.  **Trend Description:**
    Looking at the line plot, the company's sales show an overall **upward trend** from 2018 to 2022. There was a slight dip in sales in 2020 (from 110 to 95), but sales recovered and grew in the subsequent years, reaching their highest point in 2022.

:::



